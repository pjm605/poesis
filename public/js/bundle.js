'use strict';

var app = angular.module('myApp', ['ui.router', 'ngMessages']);

app.run(function ($rootScope, $window) {
  $rootScope.$on('$stateChangeError', function (event, toState, toParams, fromState, fromParams, error) {
    console.error('Error transitioning from "' + fromState.name + '" to "' + toState.name + '":', error);
  });

  $rootScope.goBack = function () {
    $window.history.back();
  };
});

app.factory('parse', function ($http) {

  var dictionary = $http.get('/api/dictionary').then(function (response) {
    return response.data;
  });

  return function (word) {
    return dictionary.then(function (dict) {
      if (dict[word]) return dict[word];else return "Not in dictionary";
    });
  };
});

app.controller('MainCtrl', function ($scope, $log, parse, soundsFactory) {
  $scope.poem = { line: 0, word: "" };
  $scope.lineEnd = false;

  $scope.onSpace = function ($event) {
    console.log("on space event triggered");

    var words = $scope.poem.input.split(' ');
    $scope.poem.word = words[words.length - 1];
    var wordSounds = parse($scope.poem.word).then(function (p) {
      return p;
    });

    wordSounds.then(function (sounds) {
      console.log(soundsFactory.countSounds(sounds));
    });

    $scope.lineEnd = false;
  };
  $scope.onEnter = function ($event) {
    console.log("onEnter event triggered");
    $scope.lineEnd = true;
    // do anything line-dependent here?
    $scope.onSpace();
  };
});

app.factory('PhonemeFactory', function () {

  return {
    getPhonemeCount: function getPhonemeCount(word, dictionary) {
      var phonemes = dictionary[word.toLowerCase()];
      if (/\d/gi.test(word)) {
        return phonemes[1].match(/(\d)/gi).length;
      }
      return null;
    }
  };
});

app.factory('countSounds', function () {

  return function (word) {
    var newWord = word.replace(/[^A-Za-z ]+/g, '');
    newWord = newWord.split(" ");
    var soundDic = {};
    for (var i = 0; i < newWord.length; i++) {
      if (soundDic.hasOwnProperty(newWord[i]) === false) soundDic[newWord[i]] = 1;else soundDic[newWord[i]] += 1;
    }
    return soundDic;
  };
});

app.factory('soundsFactory', function () {
  var soundDic = {};
  return {
    countSounds: function countSounds(word) {
      var newWord = word.replace(/[^A-Za-z ]+/g, '');
      newWord = newWord.split(" ");
      for (var i = 0; i < newWord.length; i++) {
        if (soundDic.hasOwnProperty(newWord[i]) === false) soundDic[newWord[i]] = 1;else soundDic[newWord[i]] += 1;
      }
    },
    getSoundDic: function getSoundDic() {
      return soundDic;
    },
    identifySignificant: function identifySignificant(sounds) {
      /*
        takes in an object containing the counts of all the sounds throughout
        the poem, and returns an array of significant sounds
      */
      //TODO
      return;
    }
  };
});
//# sourceMappingURL=data:application/json;base64,
