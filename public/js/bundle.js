'use strict';

var app = angular.module('myApp', ['ui.router', 'ngMessages']);

app.run(function ($rootScope, $window) {
  $rootScope.$on('$stateChangeError', function (event, toState, toParams, fromState, fromParams, error) {
    console.error('Error transitioning from "' + fromState.name + '" to "' + toState.name + '":', error);
  });

  $rootScope.goBack = function () {
    $window.history.back();
  };
});

app.factory('DictionaryFactory', function ($http) {

  return {
    getDictionary: function getDictionary() {
      return $http.get('/api/dictionary').then(function (response) {
        return response.data;
      });
    }
  };
});

app.controller('MainCtrl', function ($scope, $log, DictionaryFactory, PhonemeFactory, SoundcountFactory) {
  $scope.poem = { line: 0, word: "" };
  $scope.lineEnd = false;

  $scope.onSpace = function ($event) {
    console.log("on space event triggered");
    var words = $scope.poem.input.split(' ');
    $scope.poem.word = words[words.length - 1];
    console.log($scope.poem.word);
    $scope.lineEnd = false;
  };
  $scope.onEnter = function ($event) {
    console.log("onEnter event triggered");
    $scope.lineEnd = true;
    // do anything line-dependent here?
    $scope.onSpace();
  };
<<<<<<< HEAD

  DictionaryFactory.getDictionary().then(function (dictionary) {
    $scope.dictionary = dictionary;
  }).catch($log.error);
=======
>>>>>>> 80b95e364cf1b2421afa2d84e2e21088c0ffd999
});
app.factory('PhonemeFactory', function () {

  return {
    getPhonemeCount: function getPhonemeCount(word, dictionary) {
      var phonemes = dictionary[word.toLowerCase()];
      if (/\d/gi.test(word)) {
        return phonemes[1].match(/(\d)/gi).length;
      }
      return null;
    }
  };
});

app.factory('SoundcountFactory', function () {
  return {
    getSoundcount: function getSoundcount(word) {
      var newWord = word.replace(/[^A-Za-z ]+/g, '');
      newWord = newWord.split(" ");

      var soundDic = {};

      for (var i = 0; i < newWord.length; i++) {
        if (soundDic.hasOwnProperty(newWord[i]) === false) soundDic[newWord[i]] = 1;else soundDic[newWord[i]] += 1;
      }

      return soundDic;
    }
  };
});
<<<<<<< HEAD
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsImRpY3Rpb25hcnlGYWN0b3J5LmpzIiwibWFpbi5jb250cm9sbGVycy5qcyIsInBob25lbWVGYWN0b3J5LmpzIiwic291bmRDb3VudC5mYWN0b3J5LmpzIl0sIm5hbWVzIjpbImFwcCIsImFuZ3VsYXIiLCJtb2R1bGUiLCJydW4iLCIkcm9vdFNjb3BlIiwiJHdpbmRvdyIsIiRvbiIsImV2ZW50IiwidG9TdGF0ZSIsInRvUGFyYW1zIiwiZnJvbVN0YXRlIiwiZnJvbVBhcmFtcyIsImVycm9yIiwiY29uc29sZSIsIm5hbWUiLCJnb0JhY2siLCJoaXN0b3J5IiwiYmFjayIsImZhY3RvcnkiLCIkaHR0cCIsImdldERpY3Rpb25hcnkiLCJnZXQiLCJ0aGVuIiwicmVzcG9uc2UiLCJkYXRhIiwiY29udHJvbGxlciIsIiRzY29wZSIsIiRsb2ciLCJEaWN0aW9uYXJ5RmFjdG9yeSIsIlBob25lbWVGYWN0b3J5IiwiU291bmRjb3VudEZhY3RvcnkiLCJwb2VtIiwibGluZSIsIndvcmQiLCJsaW5lRW5kIiwib25TcGFjZSIsIiRldmVudCIsImxvZyIsIndvcmRzIiwiaW5wdXQiLCJzcGxpdCIsImxlbmd0aCIsIm9uRW50ZXIiLCJkaWN0aW9uYXJ5IiwiY2F0Y2giLCJnZXRQaG9uZW1lQ291bnQiLCJwaG9uZW1lcyIsInRvTG93ZXJDYXNlIiwidGVzdCIsIm1hdGNoIiwiZ2V0U291bmRjb3VudCIsIm5ld1dvcmQiLCJyZXBsYWNlIiwic291bmREaWMiLCJpIiwiaGFzT3duUHJvcGVydHkiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQUFBLE1BQUFDLFFBQUFDLE1BQUEsQ0FBQSxPQUFBLEVBQUEsQ0FBQSxXQUFBLEVBQUEsWUFBQSxDQUFBLENBQUE7O0FBRUFGLElBQUFHLEdBQUEsQ0FBQSxVQUFBQyxVQUFBLEVBQUFDLE9BQUEsRUFBQTtBQUNBRCxhQUFBRSxHQUFBLENBQUEsbUJBQUEsRUFBQSxVQUFBQyxLQUFBLEVBQUFDLE9BQUEsRUFBQUMs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LFFBQUFHLENBQUEsQ0FBQSxLQUFBLENBQUE7QUFDQTs7QUFFQSxhQUFBRCxRQUFBO0FBQ0E7QUFiQSxHQUFBO0FBZUEsQ0FoQkEiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYXBwID0gYW5ndWxhci5tb2R1bGUoJ215QXBwJywgWyd1aS5yb3V0ZXInLCAnbmdNZXNzYWdlcyddKTtcblxuYXBwLnJ1bihmdW5jdGlvbiAoJHJvb3RTY29wZSwgJHdpbmRvdykge1xuICAkcm9vdFNjb3BlLiRvbignJHN0YXRlQ2hhbmdlRXJyb3InLCBmdW5jdGlvbiAoZXZlbnQsIHRvU3RhdGUsIHRvUGFyYW1zLCBmcm9tU3RhdGUsIGZyb21QYXJhbXMsIGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgdHJhbnNpdGlvbmluZyBmcm9tIFwiJyArIGZyb21TdGF0ZS5uYW1lICsgJ1wiIHRvIFwiJyArIHRvU3RhdGUubmFtZSArICdcIjonLCBlcnJvcik7XG4gIH0pO1xuXG4gICRyb290U2NvcGUuZ29CYWNrID0gZnVuY3Rpb24gKCkge1xuICAgICR3aW5kb3cuaGlzdG9yeS5iYWNrKClcbiAgfTtcblxufSk7XG4iLCJhcHAuZmFjdG9yeSgnRGljdGlvbmFyeUZhY3RvcnknLCBmdW5jdGlvbigkaHR0cCkge1xuXG5cbiAgcmV0dXJuIHtcbiAgICBnZXREaWN0aW9uYXJ5OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvZGljdGlvbmFyeScpXG4gICAgICAudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgXHRyZXR1cm4gcmVzcG9uc2UuZGF0YTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn0pO1xuIiwiYXBwLmNvbnRyb2xsZXIoJ01haW5DdHJsJywgZnVuY3Rpb24oJHNjb3BlLCAkbG9nLCBEaWN0aW9uYXJ5RmFjdG9yeSwgUGhvbmVtZUZhY3RvcnksIFNvdW5kY291bnRGYWN0b3J5KSB7XG4gICRzY29wZS5wb2VtID0ge2xpbmU6IDAsIHdvcmQ6IFwiXCJ9O1xuICAkc2NvcGUubGluZUVuZCA9IGZhbHNlO1xuXG4gICRzY29wZS5vblNwYWNlID0gZnVuY3Rpb24gKCRldmVudCkge1xuICAgIGNvbnNvbGUubG9nKFwib24gc3BhY2UgZXZlbnQgdHJpZ2dlcmVkXCIpO1xuICAgIHZhciB3b3JkcyA9ICRzY29wZS5wb2VtLmlucHV0LnNwbGl0KCcgJyk7XG4gICAgJHNjb3BlLnBvZW0ud29yZCA9IHdvcmRzW3dvcmRzLmxlbmd0aC0xXTtcbiAgICBjb25zb2xlLmxvZygkc2NvcGUucG9lbS53b3JkKTtcbiAgICAkc2NvcGUubGluZUVuZCA9IGZhbHNlO1xuICB9O1xuICAkc2NvcGUub25FbnRlciA9IGZ1bmN0aW9uICgkZXZlbnQpIHtcbiAgICBjb25zb2xlLmxvZyhcIm9uRW50ZXIgZXZlbnQgdHJpZ2dlcmVkXCIpO1xuICAgICRzY29wZS5saW5lRW5kID0gdHJ1ZTtcbiAgICAvLyBkbyBhbnl0aGluZyBsaW5lLWRlcGVuZGVudCBoZXJlP1xuICAgICRzY29wZS5vblNwYWNlKCk7XG4gIH07XG5cbiAgRGljdGlvbmFyeUZhY3RvcnkuZ2V0RGljdGlvbmFyeSgpXG4gIC50aGVuKGZ1bmN0aW9uIChkaWN0aW9uYXJ5KSB7XG4gICAgJHNjb3BlLmRpY3Rpb25hcnkgPSBkaWN0aW9uYXJ5O1xuICB9KS5jYXRjaCgkbG9nLmVycm9yKTtcbiAgXG59KTsiLCJhcHAuZmFjdG9yeSgnUGhvbmVtZUZhY3RvcnknLCBmdW5jdGlvbiAoKSB7XG5cbiAgcmV0dXJuIHtcbiAgICBnZXRQaG9uZW1lQ291bnQ6IGZ1bmN0aW9uICh3b3JkLCBkaWN0aW9uYXJ5KSB7XG4gICAgICB2YXIgcGhvbmVtZXMgPSBkaWN0aW9uYXJ5W3dvcmQudG9Mb3dlckNhc2UoKV07XG4gICAgICBpZiAoL1xcZC9naS50ZXN0KHdvcmQpKXtcbiAgICAgICAgcmV0dXJuIHBob25lbWVzWzFdLm1hdGNoKC8oXFxkKS9naSkubGVuZ3RoO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9O1xuXG59KTtcbiIsImFwcC5mYWN0b3J5KCdTb3VuZGNvdW50RmFjdG9yeScsIGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIGdldFNvdW5kY291bnQ6IGZ1bmN0aW9uKHdvcmQpIHtcbiAgICAgIHZhciBuZXdXb3JkID0gd29yZC5yZXBsYWNlKC9bXkEtWmEteiBdKy9nLCAnJyk7XG4gICAgICBuZXdXb3JkID0gbmV3V29yZC5zcGxpdChcIiBcIik7XG5cbiAgICAgIHZhciBzb3VuZERpYyA9IHt9O1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5ld1dvcmQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHNvdW5kRGljLmhhc093blByb3BlcnR5KG5ld1dvcmRbaV0pID09PSBmYWxzZSkgc291bmREaWNbbmV3V29yZFtpXV0gPSAxO1xuICAgICAgICBlbHNlIHNvdW5kRGljW25ld1dvcmRbaV1dICs9IDE7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzb3VuZERpYztcbiAgICB9XG4gIH07XG59KTtcblxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
=======
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsIm1haW4uY29udHJvbGxlcnMuanMiLCJzb3VuZENvdW50LmZhY3RvcnkuanMiXSwibmFtZXMiOlsiYXBwIiwiYW5ndWxhciIsIm1vZHVsZSIsInJ1biIsIiRyb290U2NvcGUiLCIkd2luZG93IiwiJG9uIiwiZXZlbnQiLCJ0b1N0YXRlIiwidG9QYXJhbXMiLCJmcm9tU3RhdGUiLCJmcm9tUGFyYW1zIiwiZXJyb3IiLCJjb25zb2xlIiwibmFtZSIsImdvQmFjayIsImhpc3RvcnkiLCJiYWNrIiwiY29udHJvbGxlciIsIiRzY29wZSIsInBvZW0iLCJsaW5lIiwid29yZCIsImxpbmVFbmQiLCJvblNwYWNlIiwiJGV2ZW50IiwibG9nIiwid29yZHMiLCJpbnB1dCIsInNwbGl0IiwibGVuZ3RoIiwib25FbnRlciIsImZhY3RvcnkiLCIkaHR0cCIsImdldFNvdW5kY291bnQiLCJuZXdXb3JkIiwicmVwbGFjZSIsInNvdW5kRGljIiwiaSIsImhhc093blByb3BlcnR5Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFBQSxNQUFBQyxRQUFBQyxNQUFBLENBQUEsT0FBQSxFQUFBLENBQUEsV0FBQSxFQUFBLFlBQUEsQ0FBQSxDQUFBOztBQUVBRixJQUFBRyxHQUFBLENBQUEsVUFBQUMsVUFBQSxFQUFBQyxPQUFBLEVBQUE7QUFDQUQsYUFBQUUsR0FBQSxDQUFBLG1CQUFBLEVBQUEsVUFBQUMsS0FBQSxFQUFBQyxPQUFBLEVBQUFDLFFBQUEsRUFBQUMsU0FBQSxFQUFBQyxVQUFBLEVBQUFDLEtBQUEsRUFBQTtBQUNBQyxZQUFBRCxLQUFBLENBQUEsK0JBQUFGLFVBQUFJLElBQUEsR0FBQSxRQUFBLEdBQUFOLFFBQUFNLElBQUEsR0FBQSxJQUFBLEVBQUFGLEtBQUE7QUFDQSxHQUZBOztBQUlBUixhQUFBVyxNQUFBLEdBQUEsWUFBQTtBQUNBVixZQUFBVyxPQUFBLENBQUFDLElBQUE7QUFDQSxHQUZBO0FBSUEsQ0FUQTs7QUNKQWpCLElBQUFrQixVQUFBLENBQUEsVUFBQSxFQUFBLFVBQUFDLE1BQUEsRUFBQTtBQUNBQSxTQUFBQyxJQUFBLEdBQUEsRUFBQUMsTUFBQSxDQUFBLEVBQUFDLE1BQUEsRUFBQSxFQUFBO0FBQ0FILFNBQUFJLE9BQUEsR0FBQSxLQUFBOztBQUVBSixTQUFBSyxPQUFBLEdBQUEsVUFBQUMsTUFBQSxFQUFBO0FBQ0FaLFlBQUFhLEdBQUEsQ0FBQSwwQkFBQTtBQUNBLFFBQUFDLFFBQUFSLE9BQUFDLElBQUEsQ0FBQVEsS0FBQSxDQUFBQyxLQUFBLENBQUEsR0FBQSxDQUFBO0FBQ0FWLFdBQUFDLElBQUEsQ0FBQUUsSUFBQSxHQUFBSyxNQUFBQSxNQUFBRyxNQUFBLEdBQUEsQ0FBQSxDQUFBO0FBQ0FqQixZQUFBYSxHQUFBLENBQUFQLE9BQUFDLElBQUEsQ0FBQUUsSUFBQTtBQUNBSCxXQUFBSSxPQUFBLEdBQUEsS0FBQTtBQUNBLEdBTkE7QUFPQUosU0FBQVksT0FBQSxHQUFBLFVBQUFOLE1BQUEsRUFBQTtBQUNBWixZQUFBYSxHQUFBLENBQUEseUJBQUE7QUFDQVAsV0FBQUksT0FBQSxHQUFBLElBQUE7QUFDQTtBQUNBSixXQUFBSyxPQUFBO0FBQ0EsR0FMQTtBQU1BLENBakJBOztBQ0FBeEIsSUFBQWdDLE9BQUEsQ0FBQSxtQkFBQSxFQUFBLFVBQUFDLEtBQUEsRUFBQTs7QUFHQSxTQUFBO0FBQ0FDLG1CQUFBLHVCQUFBWixJQUFBLEVBQUE7QUFDQSxVQUFBYSxVQUFBYixLQUFBYyxPQUFBLENBQUEsY0FBQSxFQUFBLEVBQUEsQ0FBQTtBQUNBRCxnQkFBQUEsUUFBQU4sS0FBQSxDQUFBLEdBQUEsQ0FBQTs7QUFFQSxVQUFBUSxXQUFBLEVBQUE7O0FBRUEsV0FBQSxJQUFBQyxJQUFBLENBQUEsRUFBQUEsSUFBQUgsUUFBQUwsTUFBQSxFQUFBUSxHQUFBLEVBQUE7QUFDQSxZQUFBRCxTQUFBRSxjQUFBLENBQUFKLFFBQUFHLENBQUEsQ0FBQSxNQUFBLEtBQUEsRUFBQUQsU0FBQUYsUUFBQUcsQ0FBQSxDQUFBLElBQUEsQ0FBQSxDQUFBLEtBQ0FELFNBQUFGLFFBQUFHLENBQUEsQ0FBQSxLQUFBLENBQUE7QUFDQTs7QUFFQSxhQUFBRCxRQUFBO0FBQ0E7QUFiQSxHQUFBO0FBZ0JBLENBbkJBIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGFwcCA9IGFuZ3VsYXIubW9kdWxlKCdteUFwcCcsIFsndWkucm91dGVyJywgJ25nTWVzc2FnZXMnXSk7XG5cbmFwcC5ydW4oZnVuY3Rpb24gKCRyb290U2NvcGUsICR3aW5kb3cpIHtcbiAgJHJvb3RTY29wZS4kb24oJyRzdGF0ZUNoYW5nZUVycm9yJywgZnVuY3Rpb24gKGV2ZW50LCB0b1N0YXRlLCB0b1BhcmFtcywgZnJvbVN0YXRlLCBmcm9tUGFyYW1zLCBlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHRyYW5zaXRpb25pbmcgZnJvbSBcIicgKyBmcm9tU3RhdGUubmFtZSArICdcIiB0byBcIicgKyB0b1N0YXRlLm5hbWUgKyAnXCI6JywgZXJyb3IpO1xuICB9KTtcblxuICAkcm9vdFNjb3BlLmdvQmFjayA9IGZ1bmN0aW9uICgpIHtcbiAgICAkd2luZG93Lmhpc3RvcnkuYmFjaygpXG4gIH07XG5cbn0pO1xuIiwiYXBwLmNvbnRyb2xsZXIoJ01haW5DdHJsJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICRzY29wZS5wb2VtID0ge2xpbmU6IDAsIHdvcmQ6IFwiXCJ9O1xuICAkc2NvcGUubGluZUVuZCA9IGZhbHNlO1xuXG4gICRzY29wZS5vblNwYWNlID0gZnVuY3Rpb24gKCRldmVudCkge1xuICAgIGNvbnNvbGUubG9nKFwib24gc3BhY2UgZXZlbnQgdHJpZ2dlcmVkXCIpO1xuICAgIHZhciB3b3JkcyA9ICRzY29wZS5wb2VtLmlucHV0LnNwbGl0KCcgJyk7XG4gICAgJHNjb3BlLnBvZW0ud29yZCA9IHdvcmRzW3dvcmRzLmxlbmd0aC0xXTtcbiAgICBjb25zb2xlLmxvZygkc2NvcGUucG9lbS53b3JkKTtcbiAgICAkc2NvcGUubGluZUVuZCA9IGZhbHNlO1xuICB9XG4gICRzY29wZS5vbkVudGVyID0gZnVuY3Rpb24gKCRldmVudCkge1xuICAgIGNvbnNvbGUubG9nKFwib25FbnRlciBldmVudCB0cmlnZ2VyZWRcIik7XG4gICAgJHNjb3BlLmxpbmVFbmQgPSB0cnVlO1xuICAgIC8vIGRvIGFueXRoaW5nIGxpbmUtZGVwZW5kZW50IGhlcmU/XG4gICAgJHNjb3BlLm9uU3BhY2UoKTtcbiAgfVxufSk7XG4iLCJhcHAuZmFjdG9yeSgnU291bmRjb3VudEZhY3RvcnknLCBmdW5jdGlvbiAoJGh0dHApIHtcblxuXG4gIHJldHVybiB7XG4gICAgZ2V0U291bmRjb3VudDogZnVuY3Rpb24gKHdvcmQpIHtcbiAgICAgIHZhciBuZXdXb3JkID0gd29yZC5yZXBsYWNlKC9bXkEtWmEteiBdKy9nLCAnJylcbiAgICAgIG5ld1dvcmQgPSBuZXdXb3JkLnNwbGl0KFwiIFwiKTtcblxuICAgICAgdmFyIHNvdW5kRGljID0ge307XG5cbiAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmV3V29yZC5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZihzb3VuZERpYy5oYXNPd25Qcm9wZXJ0eShuZXdXb3JkW2ldKSA9PT0gZmFsc2UpIHNvdW5kRGljW25ld1dvcmRbaV1dID0gMVxuICAgICAgICBlbHNlIHNvdW5kRGljW25ld1dvcmRbaV1dICs9IDEgIFxuICAgICAgfVxuXG4gICAgICByZXR1cm4gc291bmREaWNcbiAgICB9XG4gIH07XG5cbn0pO1xuXG5cbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
>>>>>>> 80b95e364cf1b2421afa2d84e2e21088c0ffd999
