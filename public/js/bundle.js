'use strict';

var app = angular.module('myApp', ['ui.router', 'ngMessages']);

app.run(function ($rootScope, $window) {
  $rootScope.$on('$stateChangeError', function (event, toState, toParams, fromState, fromParams, error) {
    console.error('Error transitioning from "' + fromState.name + '" to "' + toState.name + '":', error);
  });

  $rootScope.goBack = function () {
    $window.history.back();
  };
});

app.factory('parse', function ($http) {

  var dictionary = $http.get('/api/dictionary').then(function (response) {
    return response.data;
  });

  return function (word) {
    return dictionary.then(function (dict) {
      if (dict[word]) return dict[word];else return "Not in dictionary";
    });
  };
});

app.controller('MainCtrl', function ($scope, $log) {
  $scope.poem = { line: 0, word: "" };
  $scope.lineEnd = false;

  $scope.onSpace = function ($event) {
    console.log("on space event triggered");
    var words = $scope.poem.input.split(' ');
    $scope.poem.word = words[words.length - 1];
    console.log($scope.poem.word);
    $scope.lineEnd = false;
  };
  $scope.onEnter = function ($event) {
    console.log("onEnter event triggered");

    $scope.lineEnd = true;
    // do anything line-dependent here?
    $scope.onSpace();
  };
});

app.factory('PhonemeFactory', function () {

  return {
    getPhonemeCount: function getPhonemeCount(word, dictionary) {
      var phonemes = dictionary[word.toLowerCase()];
      if (/\d/gi.test(word)) {
        return phonemes[1].match(/(\d)/gi).length;
      }
      return null;
    }
  };
});

app.factory('soundcounts', function () {
  return {
    countSounds: function countSounds(word) {
      var newWord = word.replace(/[^A-Za-z ]+/g, '');
      newWord = newWord.split(" ");
      var soundDic = {};
      for (var i = 0; i < newWord.length; i++) {
        if (soundDic.hasOwnProperty(newWord[i]) === false) soundDic[newWord[i]] = 1;else soundDic[newWord[i]] += 1;
      }
      return soundDic;
    }
  };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsImRpY3Rpb25hcnkuZmFjdG9yeS5qcyIsIm1haW4uY29udHJvbGxlcnMuanMiLCJwaG9uZW1lRmFjdG9yeS5qcyIsInNvdW5kY291bnQuZmFjdG9yeS5qcyJdLCJuYW1lcyI6WyJhcHAiLCJhbmd1bGFyIiwibW9kdWxlIiwicnVuIiwiJHJvb3RTY29wZSIsIiR3aW5kb3ciLCIkb24iLCJldmVudCIsInRvU3RhdGUiLCJ0b1BhcmFtcyIsImZyb21TdGF0ZSIsImZyb21QYXJhbXMiLCJlcnJvciIsImNvbnNvbGUiLCJuYW1lIiwiZ29CYWNrIiwiaGlzdG9yeSIsImJhY2siLCJmYWN0b3J5IiwiJGh0dHAiLCJkaWN0aW9uYXJ5IiwiZ2V0IiwidGhlbiIsInJlc3BvbnNlIiwiZGF0YSIsIndvcmQiLCJkaWN0IiwiY29udHJvbGxlciIsIiRzY29wZSIsIiRsb2ciLCJwb2VtIiwibGluZSIsImxpbmVFbmQiLCJvblNwYWNlIiwiJGV2ZW50IiwibG9nIiwid29yZHMiLCJpbnB1dCIsInNwbGl0IiwibGVuZ3RoIiwib25FbnRlciIsImdldFBob25lbWVDb3VudCIsInBob25lbWVzIiwidG9Mb3dlckNhc2UiLCJ0ZXN0IiwibWF0Y2giLCJjb3VudFNvdW5kcyIsIm5ld1dvcmQiLCJyZXBsYWNlIiwic291bmREaWMiLCJpIiwiaGFzT3duUHJvcGVydHkiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQUFBLE1BQUFDLFFBQUFDLE1BQUEsQ0FBQSxPQUFBLEVBQUEsQ0FBQSxXQUFBLEVBQUEsWUFBQSxDQUFBLENBQUE7O0FBRUFGLElBQUFHLEdBQUEsQ0FBQSxVQUFBQyxVQUFBLEVBQUFDLE9BQUEsRUFBQTtBQUNBRCxhQUFBRSxHQUFBLENBQUEsbUJBQUEsRUFBQSxVQUFBQyxLQUFBLEVBQUFDLE9BQUEsRUFBQUMsUUFBQSxFQUFBQyxTQUFBLEVBQUFDLFVBQUEsRUFBQUMsS0FBQSxFQUFBO0FBQ0FDLFlBQUFELEtBQUEsQ0FBQSwrQkFBQUYsVUFB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c291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYXBwID0gYW5ndWxhci5tb2R1bGUoJ215QXBwJywgWyd1aS5yb3V0ZXInLCAnbmdNZXNzYWdlcyddKTtcblxuYXBwLnJ1bihmdW5jdGlvbiAoJHJvb3RTY29wZSwgJHdpbmRvdykge1xuICAkcm9vdFNjb3BlLiRvbignJHN0YXRlQ2hhbmdlRXJyb3InLCBmdW5jdGlvbiAoZXZlbnQsIHRvU3RhdGUsIHRvUGFyYW1zLCBmcm9tU3RhdGUsIGZyb21QYXJhbXMsIGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgdHJhbnNpdGlvbmluZyBmcm9tIFwiJyArIGZyb21TdGF0ZS5uYW1lICsgJ1wiIHRvIFwiJyArIHRvU3RhdGUubmFtZSArICdcIjonLCBlcnJvcik7XG4gIH0pO1xuXG4gICRyb290U2NvcGUuZ29CYWNrID0gZnVuY3Rpb24gKCkge1xuICAgICR3aW5kb3cuaGlzdG9yeS5iYWNrKClcbiAgfTtcblxufSk7XG4iLCJhcHAuZmFjdG9yeSgncGFyc2UnLCBmdW5jdGlvbigkaHR0cCkge1xuXG4gIHZhciBkaWN0aW9uYXJ5ID0gJGh0dHAuZ2V0KCcvYXBpL2RpY3Rpb25hcnknKVxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICByZXR1cm4gZnVuY3Rpb24gKHdvcmQpIHtcbiAgICByZXR1cm4gZGljdGlvbmFyeS50aGVuKGZ1bmN0aW9uIChkaWN0KSB7XG4gICAgICBpZiAoZGljdFt3b3JkXSkgcmV0dXJuIGRpY3Rbd29yZF07XG4gICAgICBlbHNlIHJldHVybiBcIk5vdCBpbiBkaWN0aW9uYXJ5XCI7XG4gICAgfSlcbiAgfVxufSk7XG4iLCJhcHAuY29udHJvbGxlcignTWFpbkN0cmwnLCBmdW5jdGlvbigkc2NvcGUsICRsb2cpIHtcbiAgJHNjb3BlLnBvZW0gPSB7bGluZTogMCwgd29yZDogXCJcIn07XG4gICRzY29wZS5saW5lRW5kID0gZmFsc2U7XG5cbiAgJHNjb3BlLm9uU3BhY2UgPSBmdW5jdGlvbiAoJGV2ZW50KSB7XG4gICAgY29uc29sZS5sb2coXCJvbiBzcGFjZSBldmVudCB0cmlnZ2VyZWRcIik7XG4gICAgdmFyIHdvcmRzID0gJHNjb3BlLnBvZW0uaW5wdXQuc3BsaXQoJyAnKTtcbiAgICAkc2NvcGUucG9lbS53b3JkID0gd29yZHNbd29yZHMubGVuZ3RoLTFdO1xuICAgIGNvbnNvbGUubG9nKCRzY29wZS5wb2VtLndvcmQpO1xuICAgICRzY29wZS5saW5lRW5kID0gZmFsc2U7XG4gIH1cbiAgJHNjb3BlLm9uRW50ZXIgPSBmdW5jdGlvbiAoJGV2ZW50KSB7XG4gICAgY29uc29sZS5sb2coXCJvbkVudGVyIGV2ZW50IHRyaWdnZXJlZFwiKTtcblxuICAgICRzY29wZS5saW5lRW5kID0gdHJ1ZTtcbiAgICAvLyBkbyBhbnl0aGluZyBsaW5lLWRlcGVuZGVudCBoZXJlP1xuICAgICRzY29wZS5vblNwYWNlKCk7XG4gIH1cbn0pO1xuIiwiYXBwLmZhY3RvcnkoJ1Bob25lbWVGYWN0b3J5JywgZnVuY3Rpb24gKCkge1xuXG4gIHJldHVybiB7XG4gICAgZ2V0UGhvbmVtZUNvdW50OiBmdW5jdGlvbiAod29yZCwgZGljdGlvbmFyeSkge1xuICAgICAgdmFyIHBob25lbWVzID0gZGljdGlvbmFyeVt3b3JkLnRvTG93ZXJDYXNlKCldO1xuICAgICAgaWYgKC9cXGQvZ2kudGVzdCh3b3JkKSl7XG4gICAgICAgIHJldHVybiBwaG9uZW1lc1sxXS5tYXRjaCgvKFxcZCkvZ2kpLmxlbmd0aDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfTtcblxufSk7XG4iLCJhcHAuZmFjdG9yeSgnc291bmRjb3VudHMnLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNvdW50U291bmRzOiBmdW5jdGlvbiAod29yZCkge1xuICAgICAgdmFyIG5ld1dvcmQgPSB3b3JkLnJlcGxhY2UoL1teQS1aYS16IF0rL2csICcnKTtcbiAgICAgIG5ld1dvcmQgPSBuZXdXb3JkLnNwbGl0KFwiIFwiKTtcbiAgICAgIHZhciBzb3VuZERpYyA9IHt9O1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuZXdXb3JkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmKHNvdW5kRGljLmhhc093blByb3BlcnR5KG5ld1dvcmRbaV0pID09PSBmYWxzZSkgc291bmREaWNbbmV3V29yZFtpXV0gPSAxO1xuICAgICAgICBlbHNlIHNvdW5kRGljW25ld1dvcmRbaV1dICs9IDE7XG4gICAgICB9XG4gICAgICByZXR1cm4gc291bmREaWM7XG4gICAgfVxuICB9O1xufSk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
