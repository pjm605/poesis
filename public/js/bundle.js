'use strict';

var app = angular.module('myApp', ['ui.router', 'ngMessages']);

app.run(function ($rootScope, $window) {
  $rootScope.$on('$stateChangeError', function (event, toState, toParams, fromState, fromParams, error) {
    console.error('Error transitioning from "' + fromState.name + '" to "' + toState.name + '":', error);
  });

  $rootScope.goBack = function () {
    $window.history.back();
  };
});

app.controller('MainCtrl', function ($scope) {
  $scope.poem = { line: 0, word: "" };
  $scope.lineEnd = false;

  $scope.onSpace = function ($event) {
    console.log("on space event triggered");
    var words = $scope.poem.input.split(' ');
    $scope.poem.word = words[words.length - 1];
    console.log($scope.poem.word);
    $scope.lineEnd = false;
  };
  $scope.onEnter = function ($event) {
    console.log("onEnter event triggered");

    $scope.lineEnd = true;
    // do anything line-dependent here?
    $scope.onSpace();
  };
});

app.factory('SoundcountFactory', function ($http) {
  return {
    getSoundcount: function getSoundcount(word) {
      var newWord = word.replace(/[^A-Za-z ]+/g, '');
      newWord = newWord.split(" ");
      var soundDic = {};
      for (var i = 0; i < newWord.length; i++) {
        if (soundDic.hasOwnProperty(newWord[i]) === false) soundDic[newWord[i]] = 1;else soundDic[newWord[i]] += 1;
      }
      return soundDic;
    }
  };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsIm1haW4uY29udHJvbGxlcnMuanMiLCJzb3VuZENvdW50LmZhY3RvcnkuanMiXSwibmFtZXMiOlsiYXBwIiwiYW5ndWxhciIsIm1vZHVsZSIsInJ1biIsIiRyb290U2NvcGUiLCIkd2luZG93IiwiJG9uIiwiZXZlbnQiLCJ0b1N0YXRlIiwidG9QYXJhbXMiLCJmcm9tU3RhdGUiLCJmcm9tUGFyYW1zIiwiZXJyb3IiLCJjb25zb2xlIiwibmFtZSIsImdvQmFjayIsImhpc3RvcnkiLCJiYWNrIiwiY29udHJvbGxlciIsIiRzY29wZSIsInBvZW0iLCJsaW5lIiwid29yZCIsImxpbmVFbmQiLCJvblNwYWNlIiwiJGV2ZW50IiwibG9nIiwid29yZHMiLCJpbnB1dCIsInNwbGl0IiwibGVuZ3RoIiwib25FbnRlciIsImZhY3RvcnkiLCIkaHR0cCIsImdldFNvdW5kY291bnQiLCJuZXdXb3JkIiwicmVwbGFjZSIsInNvdW5kRGljIiwiaSIsImhhc093blByb3BlcnR5Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFBQSxNQUFBQyxRQUFBQyxNQUFBLENBQUEsT0FBQSxFQUFBLENBQUEsV0FBQSxFQUFBLFlBQUEsQ0FBQSxDQUFBOztBQUVBRixJQUFBRyxHQUFBLENBQUEsVUFBQUMsVUFBQSxFQUFBQyxPQUFBLEVBQUE7QUFDQUQsYUFBQUUsR0FBQSxDQUFBLG1CQUFBLEVBQUEsVUFBQUMsS0FBQSxFQUFBQyxPQUFBLEVBQUFDLFFBQUEsRUFBQUMsU0FBQSxFQUFBQyxVQUFBLEVBQUFDLEtBQUEsRUFBQTtBQUNBQyxZQUFBRCxLQUFBLENBQUEsK0JBQUFGLFVBQUFJLElBQUEsR0FBQSxRQUFBLEdBQUFOLFFBQUFNLElBQUEsR0FBQSxJQUFBLEVBQUFGLEtBQUE7QUFDQSxHQUZBOztBQUlBUixhQUFBVyxNQUFBLEdBQUEsWUFBQTtBQUNBVixZQUFBVyxPQUFBLENBQUFDLElBQUE7QUFDQSxHQUZBO0FBSUEsQ0FUQTs7QUNKQWpCLElBQUFrQixVQUFBLENBQUEsVUFBQSxFQUFBLFVBQUFDLE1BQUEsRUFBQTtBQUNBQSxTQUFBQyxJQUFBLEdBQUEsRUFBQUMsTUFBQSxDQUFBLEVBQUFDLE1BQUEsRUFBQSxFQUFBO0FBQ0FILFNBQUFJLE9BQUEsR0FBQSxLQUFBOztBQUVBSixTQUFBSyxPQUFBLEdBQUEsVUFBQUMsTUFBQSxFQUFBO0FBQ0FaLFlBQUFhLEdBQUEsQ0FBQSwwQkFBQTtBQUNBLFFBQUFDLFFBQUFSLE9BQUFDLElBQUEsQ0FBQVEsS0FBQSxDQUFBQyxLQUFBLENBQUEsR0FBQSxDQUFBO0FBQ0FWLFdBQUFDLElBQUEsQ0FBQUUsSUFBQSxHQUFBSyxNQUFBQSxNQUFBRyxNQUFBLEdBQUEsQ0FBQSxDQUFBO0FBQ0FqQixZQUFBYSxHQUFBLENBQUFQLE9BQUFDLElBQUEsQ0FBQUUsSUFBQTtBQUNBSCxXQUFBSSxPQUFBLEdBQUEsS0FBQTtBQUNBLEdBTkE7QUFPQUosU0FBQVksT0FBQSxHQUFBLFVBQUFOLE1BQUEsRUFBQTtBQUNBWixZQUFBYSxHQUFBLENBQUEseUJBQUE7O0FBRUFQLFdBQUFJLE9BQUEsR0FBQSxJQUFBO0FBQ0E7QUFDQUosV0FBQUssT0FBQTtBQUNBLEdBTkE7QUFPQSxDQWxCQTs7QUNBQXhCLElBQUFnQyxPQUFBLENBQUEsbUJBQUEsRUFBQSxVQUFBQyxLQUFBLEVBQUE7QUFDQSxTQUFBO0FBQ0FDLG1CQUFBLHVCQUFBWixJQUFBLEVBQUE7QUFDQSxVQUFBYSxVQUFBYixLQUFBYyxPQUFBLENBQUEsY0FBQSxFQUFBLEVBQUEsQ0FBQTtBQUNBRCxnQkFBQUEsUUFBQU4sS0FBQSxDQUFBLEdBQUEsQ0FBQTtBQUNBLFVBQUFRLFdBQUEsRUFBQTtBQUNBLFdBQUEsSUFBQUMsSUFBQSxDQUFBLEVBQUFBLElBQUFILFFBQUFMLE1BQUEsRUFBQVEsR0FBQSxFQUFBO0FBQ0EsWUFBQUQsU0FBQUUsY0FBQSxDQUFBSixRQUFBRyxDQUFBLENBQUEsTUFBQSxLQUFBLEVBQUFELFNBQUFGLFFBQUFHLENBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxLQUNBRCxTQUFBRixRQUFBRyxDQUFBLENBQUEsS0FBQSxDQUFBO0FBQ0E7QUFDQSxhQUFBRCxRQUFBO0FBQ0E7QUFWQSxHQUFBO0FBYUEsQ0FkQSIsImZpbGUiOiJidW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBhcHAgPSBhbmd1bGFyLm1vZHVsZSgnbXlBcHAnLCBbJ3VpLnJvdXRlcicsICduZ01lc3NhZ2VzJ10pO1xuXG5hcHAucnVuKGZ1bmN0aW9uICgkcm9vdFNjb3BlLCAkd2luZG93KSB7XG4gICRyb290U2NvcGUuJG9uKCckc3RhdGVDaGFuZ2VFcnJvcicsIGZ1bmN0aW9uIChldmVudCwgdG9TdGF0ZSwgdG9QYXJhbXMsIGZyb21TdGF0ZSwgZnJvbVBhcmFtcywgZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciB0cmFuc2l0aW9uaW5nIGZyb20gXCInICsgZnJvbVN0YXRlLm5hbWUgKyAnXCIgdG8gXCInICsgdG9TdGF0ZS5uYW1lICsgJ1wiOicsIGVycm9yKTtcbiAgfSk7XG5cbiAgJHJvb3RTY29wZS5nb0JhY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgJHdpbmRvdy5oaXN0b3J5LmJhY2soKVxuICB9O1xuXG59KTtcbiIsImFwcC5jb250cm9sbGVyKCdNYWluQ3RybCcsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAkc2NvcGUucG9lbSA9IHtsaW5lOiAwLCB3b3JkOiBcIlwifTtcbiAgJHNjb3BlLmxpbmVFbmQgPSBmYWxzZTtcblxuICAkc2NvcGUub25TcGFjZSA9IGZ1bmN0aW9uICgkZXZlbnQpIHtcbiAgICBjb25zb2xlLmxvZyhcIm9uIHNwYWNlIGV2ZW50IHRyaWdnZXJlZFwiKTtcbiAgICB2YXIgd29yZHMgPSAkc2NvcGUucG9lbS5pbnB1dC5zcGxpdCgnICcpO1xuICAgICRzY29wZS5wb2VtLndvcmQgPSB3b3Jkc1t3b3Jkcy5sZW5ndGgtMV07XG4gICAgY29uc29sZS5sb2coJHNjb3BlLnBvZW0ud29yZCk7XG4gICAgJHNjb3BlLmxpbmVFbmQgPSBmYWxzZTtcbiAgfVxuICAkc2NvcGUub25FbnRlciA9IGZ1bmN0aW9uICgkZXZlbnQpIHtcbiAgICBjb25zb2xlLmxvZyhcIm9uRW50ZXIgZXZlbnQgdHJpZ2dlcmVkXCIpO1xuXG4gICAgJHNjb3BlLmxpbmVFbmQgPSB0cnVlO1xuICAgIC8vIGRvIGFueXRoaW5nIGxpbmUtZGVwZW5kZW50IGhlcmU/XG4gICAgJHNjb3BlLm9uU3BhY2UoKTtcbiAgfVxufSk7XG4iLCJhcHAuZmFjdG9yeSgnU291bmRjb3VudEZhY3RvcnknLCBmdW5jdGlvbiAoJGh0dHApIHtcbiAgcmV0dXJuIHtcbiAgICBnZXRTb3VuZGNvdW50OiBmdW5jdGlvbiAod29yZCkge1xuICAgICAgdmFyIG5ld1dvcmQgPSB3b3JkLnJlcGxhY2UoL1teQS1aYS16IF0rL2csICcnKVxuICAgICAgbmV3V29yZCA9IG5ld1dvcmQuc3BsaXQoXCIgXCIpO1xuICAgICAgdmFyIHNvdW5kRGljID0ge307XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5ld1dvcmQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYoc291bmREaWMuaGFzT3duUHJvcGVydHkobmV3V29yZFtpXSkgPT09IGZhbHNlKSBzb3VuZERpY1tuZXdXb3JkW2ldXSA9IDFcbiAgICAgICAgZWxzZSBzb3VuZERpY1tuZXdXb3JkW2ldXSArPSAxXG4gICAgICB9XG4gICAgICByZXR1cm4gc291bmREaWNcbiAgICB9XG4gIH07XG5cbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
