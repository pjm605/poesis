'use strict';

var app = angular.module('myApp', ['ui.router', 'ngMessages']);

app.run(function ($rootScope, $window) {
  $rootScope.$on('$stateChangeError', function (event, toState, toParams, fromState, fromParams, error) {
    console.error('Error transitioning from "' + fromState.name + '" to "' + toState.name + '":', error);
  });

  $rootScope.goBack = function () {
    $window.history.back();
  };
});

app.factory('parse', function ($http) {
  getDictionary = function getDictionary() {
    return $http.get('/api/dictionary').then(function (response) {
      return response.data;
    });
  };
  return function (word) {};
});

app.controller('MainCtrl', function ($scope, $log) {
  $scope.poem = { line: 0, word: "" };
  $scope.lineEnd = false;

  $scope.onSpace = function ($event) {
    console.log("on space event triggered");
    var words = $scope.poem.input.split(' ');
    $scope.poem.word = words[words.length - 1];
    console.log($scope.poem.word);
    $scope.lineEnd = false;
  };
  $scope.onEnter = function ($event) {
    console.log("onEnter event triggered");

    $scope.lineEnd = true;
    // do anything line-dependent here?
    $scope.onSpace();
  };
});

app.factory('PhonemeFactory', function () {

  return {
    getPhonemeCount: function getPhonemeCount(word, dictionary) {
      var phonemes = dictionary[word.toLowerCase()];
      if (/\d/gi.test(word)) {
        return phonemes[1].match(/(\d)/gi).length;
      }
      return null;
    }
  };
});

app.factory('soundcounts', function () {
  return {
    countSounds: function countSounds(word) {
      var newWord = word.replace(/[^A-Za-z ]+/g, '');
      newWord = newWord.split(" ");
      var soundDic = {};
      for (var i = 0; i < newWord.length; i++) {
        if (soundDic.hasOwnProperty(newWord[i]) === false) soundDic[newWord[i]] = 1;else soundDic[newWord[i]] += 1;
      }
      return soundDic;
    }
  };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsImRpY3Rpb25hcnkuZmFjdG9yeS5qcyIsIm1haW4uY29udHJvbGxlcnMuanMiLCJwaG9uZW1lRmFjdG9yeS5qcyIsInNvdW5kY291bnQuZmFjdG9yeS5qcyJdLCJuYW1lcyI6WyJhcHAiLCJhbmd1bGFyIiwibW9kdWxlIiwicnVuIiwiJHJvb3RTY29wZSIsIiR3aW5kb3ciLCIkb24iLCJldmVudCIsInRvU3RhdGUiLCJ0b1BhcmFtcyIsImZyb21TdGF0ZSIsImZyb21QYXJhbXMiLCJlcnJvciIsImNvbnNvbGUiLCJuYW1lIiwiZ29CYWNrIiwiaGlzdG9yeSIsImJhY2siLCJmYWN0b3J5IiwiJGh0dHAiLCJnZXREaWN0aW9uYXJ5IiwiZ2V0IiwidGhlbiIsInJlc3BvbnNlIiwiZGF0YSIsIndvcmQiLCJjb250cm9sbGVyIiwiJHNjb3BlIiwiJGxvZyIsInBvZW0iLCJsaW5lIiwibGluZUVuZCIsIm9uU3BhY2UiLCIkZXZlbnQiLCJsb2ciLCJ3b3JkcyIsImlucHV0Iiwic3BsaXQiLCJsZW5ndGgiLCJvbkVudGVyIiwiZ2V0UGhvbmVtZUNvdW50IiwiZGljdGlvbmFyeSIsInBob25lbWVzIiwidG9Mb3dlckNhc2UiLCJ0ZXN0IiwibWF0Y2giLCJjb3VudFNvdW5kcyIsIm5ld1dvcmQiLCJyZXBsYWNlIiwic291bmREaWMiLCJpIiwiaGFzT3duUHJvcGVydHkiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQUFBLE1BQUFDLFFBQUFDLE1BQUEsQ0FBQSxPQUFBLEVBQUEsQ0FBQSxXQUFBLEVBQUEsWUFBQSxDQUFBLENBQUE7O0FBRUFGLElBQUFHLEdBQUEsQ0FBQSxVQUFBQyxVQUFBLEVBQUFDLE9BQUEsRUFBQTtBQUNBRCxhQUFBRSxHQUFBLENBQUEsbUJBQUEsRUFBQSxVQUFBQyxLQUFBLEVBQUFDLE9BQUEsRUFBQUMsUUFBQSxFQUFBQyxTQUFBLEVBQUFDLFVBQUEsRUFBQUMsS0FBQSxFQUFBO0FBQ0FDLFlBQUFELEtBQUEsQ0FBQSwrQkFBQUYsVUFBQUksSUFBQSxHQUFBLFFBQUEsR0FBQU4sUUFBQU0sSUFBQSxHQUFBLElBQUEsRUFBQUYsS0FBQTtBQUNBLEdBRkE7O0FBSUFSLGFBQUFXLE1BQUEsR0FBQSxZQUFBO0FBQ0FWLFlBQUFXLE9BQUEsQ0FBQUMsSUFBQTtBQUNBLEdBRkE7QUFJQSxDQVRBOztBQ0pBakIsSUFBQWtCLE9BQUEsQ0FBQSxPQUFBLEVBQUEsVUFBQUMsS0FBQSxFQUFBO0FBQ0FDLGtCQUFBLHlCQUFBO0FBQ0EsV0FBQUQsTUFBQUUsR0FBQSxDQUFBLGlCQUFBLEVBQ0FDLElBREEsQ0FDQSxVQUFBQyxRQUFBLEVBQUE7QUFDQSxhQUFBQSxTQUFBQyxJQUFBO0FBQ0EsS0FIQSxDQUFBO0FBSUEsR0FMQTtBQU1BLFNBQUEsVUFBQUMsSUFBQSxFQUFBLENBRUEsQ0FGQTtBQUdBLENBVkE7O0FDQUF6QixJQUFBMEIsVUFBQSxDQUFBLFVBQUEsRUFBQSxVQUFBQyxNQUFBLEVBQUFDLElBQUEsRUFBQTtBQUNBRCxTQUFBRSxJQUFBLEdBQUEsRUFBQUMsTUFBQSxDQUFBLEVBQUFMLE1BQUEsRUFBQSxFQUFBO0FBQ0FFLFNBQUFJLE9BQUEsR0FBQSxLQUFBOztBQUVBSixTQUFBSyxPQUFBLEdBQUEsVUFBQUMsTUFBQSxFQUFBO0FBQ0FwQixZQUFBcUIsR0FBQSxDQUFBLDBCQUFBO0FBQ0EsUUFBQUMsUUFBQVIsT0FBQUUsSUFBQSxDQUFBTyxLQUFBLENBQUFDLEtBQUEsQ0FBQSxHQUFBLENBQUE7QUFDQVYsV0FBQUUsSUFBQSxDQUFBSixJQUFBLEdBQUFVLE1BQUFBLE1BQUFHLE1BQUEsR0FBQSxDQUFBLENBQUE7QUFDQXpCLFlBQUFxQixHQUFBLENBQUFQLE9BQUFFLElBQUEsQ0FBQUosSUFBQTtBQUNBRSxXQUFBSSxPQUFBLEdBQUEsS0FBQTtBQUNBLEdBTkE7QUFPQUosU0FBQVksT0FBQSxHQUFBLFVBQUFOLE1BQUEsRUFBQTtBQUNBcEIsWUFBQXFCLEdBQUEsQ0FBQSx5QkFBQTs7QUFFQVAsV0FBQUksT0FBQSxHQUFBLElBQUE7QUFDQTtBQUNBSixXQUFBSyxPQUFBO0FBQ0EsR0FOQTtBQU9BLENBbEJBOztBQ0FBaEMsSUFBQWtCLE9BQUEsQ0FBQSxnQkFBQSxFQUFBLFlBQUE7O0FBRUEsU0FBQTtBQUNBc0IscUJBQUEseUJBQUFmLElBQUEsRUFBQWdCLFVBQUEsRUFBQTtBQUNBLFVBQUFDLFdBQUFELFdBQUFoQixLQUFBa0IsV0FBQSxFQUFBLENBQUE7QUFDQSxVQUFBLE9BQUFDLElBQUEsQ0FBQW5CLElBQUEsQ0FBQSxFQUFBO0FBQ0EsZUFBQWlCLFNBQUEsQ0FBQSxFQUFBRyxLQUFBLENBQUEsUUFBQSxFQUFBUCxNQUFBO0FBQ0E7QUFDQSxhQUFBLElBQUE7QUFDQTtBQVBBLEdBQUE7QUFVQSxDQVpBOztBQ0FBdEMsSUFBQWtCLE9BQUEsQ0FBQSxhQUFBLEVBQUEsWUFBQTtBQUNBLFNBQUE7QUFDQTRCLGlCQUFBLHFCQUFBckIsSUFBQSxFQUFBO0FBQ0EsVUFBQXNCLFVBQUF0QixLQUFBdUIsT0FBQSxDQUFBLGNBQUEsRUFBQSxFQUFBLENBQUE7QUFDQUQsZ0JBQUFBLFFBQUFWLEtBQUEsQ0FBQSxHQUFBLENBQUE7QUFDQSxVQUFBWSxXQUFBLEVBQUE7QUFDQSxXQUFBLElBQUFDLElBQUEsQ0FBQSxFQUFBQSxJQUFBSCxRQUFBVCxNQUFBLEVBQUFZLEdBQUEsRUFBQTtBQUNBLFlBQUFELFNBQUFFLGNBQUEsQ0FBQUosUUFBQUcsQ0FBQSxDQUFBLE1BQUEsS0FBQSxFQUFBRCxTQUFBRixRQUFBRyxDQUFBLENBQUEsSUFBQSxDQUFBLENBQUEsS0FDQUQsU0FBQUYsUUFBQUcsQ0FBQSxDQUFBLEtBQUEsQ0FBQTtBQUNBO0FBQ0EsYUFBQUQsUUFBQTtBQUNBO0FBVkEsR0FBQTtBQVlBLENBYkEiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYXBwID0gYW5ndWxhci5tb2R1bGUoJ215QXBwJywgWyd1aS5yb3V0ZXInLCAnbmdNZXNzYWdlcyddKTtcblxuYXBwLnJ1bihmdW5jdGlvbiAoJHJvb3RTY29wZSwgJHdpbmRvdykge1xuICAkcm9vdFNjb3BlLiRvbignJHN0YXRlQ2hhbmdlRXJyb3InLCBmdW5jdGlvbiAoZXZlbnQsIHRvU3RhdGUsIHRvUGFyYW1zLCBmcm9tU3RhdGUsIGZyb21QYXJhbXMsIGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgdHJhbnNpdGlvbmluZyBmcm9tIFwiJyArIGZyb21TdGF0ZS5uYW1lICsgJ1wiIHRvIFwiJyArIHRvU3RhdGUubmFtZSArICdcIjonLCBlcnJvcik7XG4gIH0pO1xuXG4gICRyb290U2NvcGUuZ29CYWNrID0gZnVuY3Rpb24gKCkge1xuICAgICR3aW5kb3cuaGlzdG9yeS5iYWNrKClcbiAgfTtcblxufSk7XG4iLCJhcHAuZmFjdG9yeSgncGFyc2UnLCBmdW5jdGlvbigkaHR0cCkge1xuICBnZXREaWN0aW9uYXJ5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS9kaWN0aW9uYXJ5JylcbiAgICAudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uICh3b3JkKSB7XG4gICAgXG4gIH1cbn0pO1xuIiwiYXBwLmNvbnRyb2xsZXIoJ01haW5DdHJsJywgZnVuY3Rpb24oJHNjb3BlLCAkbG9nKSB7XG4gICRzY29wZS5wb2VtID0ge2xpbmU6IDAsIHdvcmQ6IFwiXCJ9O1xuICAkc2NvcGUubGluZUVuZCA9IGZhbHNlO1xuXG4gICRzY29wZS5vblNwYWNlID0gZnVuY3Rpb24gKCRldmVudCkge1xuICAgIGNvbnNvbGUubG9nKFwib24gc3BhY2UgZXZlbnQgdHJpZ2dlcmVkXCIpO1xuICAgIHZhciB3b3JkcyA9ICRzY29wZS5wb2VtLmlucHV0LnNwbGl0KCcgJyk7XG4gICAgJHNjb3BlLnBvZW0ud29yZCA9IHdvcmRzW3dvcmRzLmxlbmd0aC0xXTtcbiAgICBjb25zb2xlLmxvZygkc2NvcGUucG9lbS53b3JkKTtcbiAgICAkc2NvcGUubGluZUVuZCA9IGZhbHNlO1xuICB9XG4gICRzY29wZS5vbkVudGVyID0gZnVuY3Rpb24gKCRldmVudCkge1xuICAgIGNvbnNvbGUubG9nKFwib25FbnRlciBldmVudCB0cmlnZ2VyZWRcIik7XG5cbiAgICAkc2NvcGUubGluZUVuZCA9IHRydWU7XG4gICAgLy8gZG8gYW55dGhpbmcgbGluZS1kZXBlbmRlbnQgaGVyZT9cbiAgICAkc2NvcGUub25TcGFjZSgpO1xuICB9XG59KTtcbiIsImFwcC5mYWN0b3J5KCdQaG9uZW1lRmFjdG9yeScsIGZ1bmN0aW9uICgpIHtcblxuICByZXR1cm4ge1xuICAgIGdldFBob25lbWVDb3VudDogZnVuY3Rpb24gKHdvcmQsIGRpY3Rpb25hcnkpIHtcbiAgICAgIHZhciBwaG9uZW1lcyA9IGRpY3Rpb25hcnlbd29yZC50b0xvd2VyQ2FzZSgpXTtcbiAgICAgIGlmICgvXFxkL2dpLnRlc3Qod29yZCkpe1xuICAgICAgICByZXR1cm4gcGhvbmVtZXNbMV0ubWF0Y2goLyhcXGQpL2dpKS5sZW5ndGg7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH07XG5cbn0pO1xuIiwiYXBwLmZhY3RvcnkoJ3NvdW5kY291bnRzJywgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBjb3VudFNvdW5kczogZnVuY3Rpb24gKHdvcmQpIHtcbiAgICAgIHZhciBuZXdXb3JkID0gd29yZC5yZXBsYWNlKC9bXkEtWmEteiBdKy9nLCAnJyk7XG4gICAgICBuZXdXb3JkID0gbmV3V29yZC5zcGxpdChcIiBcIik7XG4gICAgICB2YXIgc291bmREaWMgPSB7fTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmV3V29yZC5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZihzb3VuZERpYy5oYXNPd25Qcm9wZXJ0eShuZXdXb3JkW2ldKSA9PT0gZmFsc2UpIHNvdW5kRGljW25ld1dvcmRbaV1dID0gMTtcbiAgICAgICAgZWxzZSBzb3VuZERpY1tuZXdXb3JkW2ldXSArPSAxO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNvdW5kRGljO1xuICAgIH1cbiAgfTtcbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
