'use strict';

var app = angular.module('myApp', ['ui.router', 'ngMessages']);

app.run(function ($rootScope, $window) {
  $rootScope.$on('$stateChangeError', function (event, toState, toParams, fromState, fromParams, error) {
    console.error('Error transitioning from "' + fromState.name + '" to "' + toState.name + '":', error);
  });

  $rootScope.goBack = function () {
    $window.history.back();
  };
});

app.factory('parse', function ($http) {

  var dictionary = $http.get('/api/dictionary').then(function (response) {
    return response.data;
  });

  return function (word) {
    return dictionary.then(function (dict) {
      if (dict[word]) return dict[word];else return "Not in dictionary";
    });
  };
});

app.controller('MainCtrl', function ($scope, $log, parse, countSounds) {
  $scope.poem = { line: 0, word: "" };
  $scope.lineEnd = false;

  $scope.onSpace = function ($event) {
    console.log("on space event triggered");
    var words = $scope.poem.input.split(' ');
    $scope.poem.word = words[words.length - 1];
    console.log($scope.poem.word);
    console.log(parse($scope.poem.word));

    $scope.lineEnd = false;
  };
  $scope.onEnter = function ($event) {
    console.log("onEnter event triggered");
    $scope.lineEnd = true;
    // do anything line-dependent here?
    $scope.onSpace();
  };
});

app.factory('PhonemeFactory', function () {

  return {
    getPhonemeCount: function getPhonemeCount(word, dictionary) {
      var phonemes = dictionary[word.toLowerCase()];
      if (/\d/gi.test(word)) {
        return phonemes[1].match(/(\d)/gi).length;
      }
      return null;
    }
  };
});

app.factory('countSounds', function () {

  return function (word) {
    var newWord = word.replace(/[^A-Za-z ]+/g, '');
    newWord = newWord.split(" ");
    var soundDic = {};
    for (var i = 0; i < newWord.length; i++) {
      if (soundDic.hasOwnProperty(newWord[i]) === false) soundDic[newWord[i]] = 1;else soundDic[newWord[i]] += 1;
    }
    return soundDic;
  };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsImRpY3Rpb25hcnkuZmFjdG9yeS5qcyIsIm1haW4uY29udHJvbGxlcnMuanMiLCJwaG9uZW1lRmFjdG9yeS5qcyIsInNvdW5kY291bnQuZmFjdG9yeS5qcyJdLCJuYW1lcyI6WyJhcHAiLCJhbmd1bGFyIiwibW9kdWxlIiwicnVuIiwiJHJvb3RTY29wZSIsIiR3aW5kb3ciLCIkb24iLCJldmVudCIsInRvU3RhdGUiLCJ0b1BhcmFtcyIsImZyb21TdGF0ZSIsImZyb21QYXJhbXMiLCJlcnJvciIsImNvbnNvbGUiLCJuYW1lIiwiZ29CYWNrIiwiaGlzdG9yeSIsImJhY2siLCJmYWN0b3J5IiwiJGh0dHAiLCJkaWN0aW9uYXJ5IiwiZ2V0IiwidGhlbiIsInJlc3BvbnNlIiwiZGF0YSIsIndvcmQiLCJkaWN0IiwiY29udHJvbGxlciIsIiRzY29wZSIsIiRsb2ciLCJwYXJzZSIsImNvdW50U291bmRzIiwicG9lbSIsImxpbmUiLCJsaW5lRW5kIiwib25TcGFjZSIsIiRldmVudCIsImxvZyIsIndvcmRzIiwiaW5wdXQiLCJzcGxpdCIsImxlbmd0aCIsIm9uRW50ZXIiLCJnZXRQaG9uZW1lQ291bnQiLCJwaG9uZW1lcyIsInRvTG93ZXJDYXNlIiwidGVzdCIsIm1hdGNoIiwibmV3V29yZCIsInJlcGxhY2UiLCJzb3VuZERpYyIsImkiLCJoYXNPd25Qcm9wZXJ0eSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBQUEsTUFBQUMsUUFBQUMsTUFBQSxDQUFBLE9BQUEsRUFBQSxDQUFBLFdBQUEsRUFBQSxZQUFBLENBQUEsQ0FBQTs7QUFFQUYsSUFBQUcsR0FBQSxDQUFBLFVBQUFDLFVBQUEsRUFBQUMsT0FBQSxFQUFBO0FBQ0FELGFBQUFFLEdBQUEsQ0FBQSxtQkFBQSxFQUFBLFVBQUFDLEtBQUEsRUFBQUMsT0FBQSxFQUFBQyxRQUFBLEVBQUFDLFNBQUEsRUFBQUMsVUFBQSxFQUFBQyxLQUFBLEVBQUE7QUFDQUMsWUFBQUQsS0FBQSxDQUFBLCtC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Q0FBQTtBQUNBO0FBQ0EsV0FBQUQsUUFBQTtBQUNBLEdBVEE7QUFVQSxDQVpBIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGFwcCA9IGFuZ3VsYXIubW9kdWxlKCdteUFwcCcsIFsndWkucm91dGVyJywgJ25nTWVzc2FnZXMnXSk7XG5cbmFwcC5ydW4oZnVuY3Rpb24gKCRyb290U2NvcGUsICR3aW5kb3cpIHtcbiAgJHJvb3RTY29wZS4kb24oJyRzdGF0ZUNoYW5nZUVycm9yJywgZnVuY3Rpb24gKGV2ZW50LCB0b1N0YXRlLCB0b1BhcmFtcywgZnJvbVN0YXRlLCBmcm9tUGFyYW1zLCBlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHRyYW5zaXRpb25pbmcgZnJvbSBcIicgKyBmcm9tU3RhdGUubmFtZSArICdcIiB0byBcIicgKyB0b1N0YXRlLm5hbWUgKyAnXCI6JywgZXJyb3IpO1xuICB9KTtcblxuICAkcm9vdFNjb3BlLmdvQmFjayA9IGZ1bmN0aW9uICgpIHtcbiAgICAkd2luZG93Lmhpc3RvcnkuYmFjaygpXG4gIH07XG5cbn0pO1xuIiwiYXBwLmZhY3RvcnkoJ3BhcnNlJywgZnVuY3Rpb24oJGh0dHApIHtcblxuICB2YXIgZGljdGlvbmFyeSA9ICRodHRwLmdldCgnL2FwaS9kaWN0aW9uYXJ5JylcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uICh3b3JkKSB7XG4gICAgcmV0dXJuIGRpY3Rpb25hcnkudGhlbihmdW5jdGlvbiAoZGljdCkge1xuICAgICAgaWYgKGRpY3Rbd29yZF0pIHJldHVybiBkaWN0W3dvcmRdO1xuICAgICAgZWxzZSByZXR1cm4gXCJOb3QgaW4gZGljdGlvbmFyeVwiO1xuICAgIH0pXG4gIH1cbn0pO1xuIiwiYXBwLmNvbnRyb2xsZXIoJ01haW5DdHJsJywgZnVuY3Rpb24oJHNjb3BlLCAkbG9nLCBwYXJzZSwgY291bnRTb3VuZHMpIHtcbiAgJHNjb3BlLnBvZW0gPSB7bGluZTogMCwgd29yZDogXCJcIn07XG4gICRzY29wZS5saW5lRW5kID0gZmFsc2U7XG5cbiAgJHNjb3BlLm9uU3BhY2UgPSBmdW5jdGlvbiAoJGV2ZW50KSB7XG4gICAgY29uc29sZS5sb2coXCJvbiBzcGFjZSBldmVudCB0cmlnZ2VyZWRcIik7XG4gICAgdmFyIHdvcmRzID0gJHNjb3BlLnBvZW0uaW5wdXQuc3BsaXQoJyAnKTtcbiAgICAkc2NvcGUucG9lbS53b3JkID0gd29yZHNbd29yZHMubGVuZ3RoLTFdO1xuICAgIGNvbnNvbGUubG9nKCRzY29wZS5wb2VtLndvcmQpO1xuICAgIGNvbnNvbGUubG9nKHBhcnNlKCRzY29wZS5wb2VtLndvcmQpKTtcblxuICAgICRzY29wZS5saW5lRW5kID0gZmFsc2U7XG4gIH1cbiAgJHNjb3BlLm9uRW50ZXIgPSBmdW5jdGlvbiAoJGV2ZW50KSB7XG4gICAgY29uc29sZS5sb2coXCJvbkVudGVyIGV2ZW50IHRyaWdnZXJlZFwiKTtcbiAgICAkc2NvcGUubGluZUVuZCA9IHRydWU7XG4gICAgLy8gZG8gYW55dGhpbmcgbGluZS1kZXBlbmRlbnQgaGVyZT9cbiAgICAkc2NvcGUub25TcGFjZSgpO1xuICB9XG59KTtcbiIsImFwcC5mYWN0b3J5KCdQaG9uZW1lRmFjdG9yeScsIGZ1bmN0aW9uICgpIHtcblxuICByZXR1cm4ge1xuICAgIGdldFBob25lbWVDb3VudDogZnVuY3Rpb24gKHdvcmQsIGRpY3Rpb25hcnkpIHtcbiAgICAgIHZhciBwaG9uZW1lcyA9IGRpY3Rpb25hcnlbd29yZC50b0xvd2VyQ2FzZSgpXTtcbiAgICAgIGlmICgvXFxkL2dpLnRlc3Qod29yZCkpe1xuICAgICAgICByZXR1cm4gcGhvbmVtZXNbMV0ubWF0Y2goLyhcXGQpL2dpKS5sZW5ndGg7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH07XG5cbn0pO1xuIiwiYXBwLmZhY3RvcnkoJ2NvdW50U291bmRzJywgZnVuY3Rpb24gKCkge1xuXG4gICAgICByZXR1cm4gZnVuY3Rpb24gKHdvcmQpIHtcbiAgICAgIHZhciBuZXdXb3JkID0gd29yZC5yZXBsYWNlKC9bXkEtWmEteiBdKy9nLCAnJyk7XG4gICAgICBuZXdXb3JkID0gbmV3V29yZC5zcGxpdChcIiBcIik7XG4gICAgICB2YXIgc291bmREaWMgPSB7fTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmV3V29yZC5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZihzb3VuZERpYy5oYXNPd25Qcm9wZXJ0eShuZXdXb3JkW2ldKSA9PT0gZmFsc2UpIHNvdW5kRGljW25ld1dvcmRbaV1dID0gMTtcbiAgICAgICAgZWxzZSBzb3VuZERpY1tuZXdXb3JkW2ldXSArPSAxO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNvdW5kRGljO1xuICB9O1xufSk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
